prepare_sql_for_relevant_products:
  description: >
    1. Interpret your managers query passed to you.

    2. Prepare intelligent SQL query and execute it to retrieve relevant SKUs from the beauty_products table.
    Start with a large search group (extreme would be to search without a where clause) run to see the results
    and then maybe truncate the results set in next iterations.
    
    3. Unless you are very sure that a product does not exists, keep trying and refining the query for atleast 4 times.
    It is possible that the product actually does not exist, but you must give your best effort to find it. After 4 
    iterations you can assume that it does not exists.
    
    4. Retrieve matching SKUs (never more than 50 entries) from the beauty_products table based on the query.
    5. Generate a brief, natural language justification for the
    results â€” e.g., why these products fit the user's needs. Optionally, review aggregate result
    set (e.g., price range, all possible values of an categorical column, tags, etc) and re-run
    with improvements sql to if you feel that the result could be better.
    
    You always want to sample some values whenver you get a requests to get a sense of the data
    before running any other query.
  
  expected_output: >
    1. The SQL query that you used to get the product list (with the limits removed)
    2. Reasoning behind why this particular SQL query (product set) was decided
    3. Some sample products fetched by running the generated SQL query with a small limit
  
  agent: product_matcher


find_simialr_user_reviews:
  description: >
    Review the context you got and expand each topic into a full section for a report.
    Make sure the report is detailed and contains any and all relevant information.
  
  expected_output: >
    A fully fledged report with the main topics, each with a full section of information.
    Formatted as markdown without '```'
  
  agent: salesman


get_relevant_products:
  description: >
    Read a users natural language query for searching products from your shop. Use other agents' help to
    help people find the right products for them that are available in your shop by providing the accurate
    sqlite3 query which should be used to get the tailored and relevant products.
  
  expected_output: >
    Either a follow up question for the user, if the users' query needs refining (never ask more than total 
    2 multi turn questions to the user) or a set of these
 
    1. A SQL query to get the relevant products for the user's query
 
    2. A human language like justification (not more than 2-3 lines) of why the selected products are good for the user.
    This should include any references of historical feedback's that could be helpful for the this user if there are any.
    This is otional because you might not always find a review for products which you have decided to show.
    This justification is presented to the user so make sure its in a language directed to the user.

    3. Few samples (not more than 5) of the products one will obtain if ran the reponse SQL query

    Before sending the final response, ALWAYS cross verify the sql that you have generated (with LIMIT 1).

    If you have asked a follow up question, set the sql query to a value such that it returns zero products
    and the sample products should also be empty array

    The final response should be a valid json file consisting of these four keys

    follow_up_question: str | None 
    sql_query: str
    justification: str | None
    sample_products: list[dict[str, Any]]

  
  agent: manager


cross_verify_output_sql:
  description: >
    Test the correctness of the final sql query
  
  expected_output: >
    The sqlite3 query that you have finalized should be tested once. (make sure to use LIMIT 1) 
    Use the product retreiver tool by providing the genrated sql query to it (with LIMIT 1) and check
    if it works or not. If it does not work available you can acess the and check if the finalilzed query is working or not. If not, fix it before
    sending to the user.
  
  agent: manager



  